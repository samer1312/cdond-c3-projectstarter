version: 2.1
orbs:
  slack: circleci/slack@4.1

commands:
  get-backend-url:
    description: Get the IP of backend 
    steps:
      - run:
          name: Get backend url
          command: |
            echo 'export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)' >> $BASH_ENV
            
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string

    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo  Destroy environments << parameters.workflow_id >> 
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string 
      current_value:
        type: string    
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            if(( $SUCCESS == << parameters.current_value >> )); 
            then
             cd ~/project/backend
             npm install
             npm run migrations:revert
            fi
              
          
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          #Removed "exit 1" to make the job success
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      # - slack/notify:
      #     channel: ${SLACK_DEFAULT_CHANNEL}
      #     event: fail
      #     template: basic_fail_1
      # - slack/notify:
      #     channel: ${SLACK_DEFAULT_CHANNEL}
      #     event: pass
      #     template: success_tagged_deploy_1
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          #Removed "exit 1" to make the job success
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      # - slack/notify:
      #     channel: ${SLACK_DEFAULT_CHANNEL}
      #     event: fail
      #     template: basic_fail_1
      # - slack/notify:
      #     channel: ${SLACK_DEFAULT_CHANNEL}
      #     event: pass
      #     template: success_tagged_deploy_1          

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontedn test
          command: |
            cd frontend
            npm install
            npm run test
      # - save_cache:
      #     paths: [frontend/node_modules]
      #     key: frontend-test      

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
      # - save_cache:
      #     paths: [backend/node_modules]
      #     key: backend-test                 

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Run frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            
      # - save_cache:
      #     paths: [frontend/node_modules]
      #     key: frontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Run backend scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            
      # - save_cache:
      #     paths: [backend/node_modules]
      #     key: backend-scan

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar and gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt
            
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  
  configure-infrastructure:
    docker:
      - image: python:3.9-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["bf:b1:29:b6:e8:c7:4c:97:f7:b6:7f:d9:1e:92:65:98"]
      
      - attach_workspace:
          at: ~/      
      
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip3 install awscli
            aws --version
          
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt configure-server.yml
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-node-and-npm:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["bf:b1:29:b6:e8:c7:4c:97:f7:b6:7f:d9:1e:92:65:98"]
      
      - attach_workspace:
          at: ~/      
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip3 install awscli
            aws --version      
      - run:
          name: Install node and npm using nvm
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt install-using-nvm.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

  run-migrations:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip 
            apk add --update nodejs npm     
            pip3 install awscli 
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm audit fix
            npm run migrations > migrations_dump.txt
      - run:
          name: Save Migration result to ENV variable
          command: |
            echo $(cat backend/migration_status.txt)
            echo '1' > backend/migration_status.txt
            echo $(cat backend/migration_status.txt)
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/migration_status.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 
          current_value: $(cat backend/migration_status.txt)


  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip 
            apk add --update nodejs npm     
            pip3 install awscli                
      - run:
          name: Get backend url
          command: |
            cd .circleci/ansible
            export BACKEND_IP=$(cat inventory.txt |grep -v "[web]")
            echo ${BACKEND_IP}
            echo $PWD
            export API_URL="http://${BACKEND_IP}:3030"
            cd ../..
            echo $PWD
            echo $API_URL
            echo API_URL=$API_URL >> "frontend/.env"
            echo ENVIRONMENT=production  >> "frontend/.env" 
            echo NODE_ENV=production >> "frontend/.env"            
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
           
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  
      - revert-migrations: 
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          current_value: $(cat backend/migration_status.txt)  

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d2:b4:ba:2f:6b:fe:a2:87:fe:6d:80:f0:f7:ea:c0:cc"]      
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update  tar gzip 
            apk add --update nodejs npm     
            apk add --update ansible
            pip3 install awscli  
      - run:
          name: Deploy backend part1
          command: |
            echo ENVIRONMENT=production >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cd backend
            npm i
            npm run build
            cp package* ./dist
            cd ..
            # Zip the directory
            tar -C backend -czf artifact.tar.gz .
                    
      - run:
          name: Deploy backend part2
          command: |                       
            cd /root/project/.circleci/ansible
            echo "Contents  of the inventory.txt file is $(cat inventory.txt |grep -v "web")"
            export BACKEND_IP=$(cat inventory.txt |grep -v "web")
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
            ansible-playbook -i inventory.txt prometheus-node-exporter.yml
        
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  
      - revert-migrations: 
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"   
          current_value: $(cat backend/migration_status.txt)          

  smoke-test:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm python3 py3-pip
            pip3 install --upgrade pip
            pip3 install awscli
      - attach_workspace:
          at: ~/   
      - get-backend-url
      - run:
          name: Backend smoke test.
          command: |
            source $BASH_ENV
            echo $SUCCESS
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  
      - revert-migrations: 
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 
          current_value: $(cat backend/migration_status.txt)

  cloudfront-update:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update  tar gzip 
            apk add --update nodejs npm     
            pip3 install awscli
      - attach_workspace:
          at: ~/            
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}" >> $BASH_ENV 
            echo ${OldWorkflowID}                    
            # Change the initial stack name, as applicable to you
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name "InitialStack" \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
            
            echo ${OldWorkflowID} >> .circleci/ansible/workflowid.txt
            echo Current workflow id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/workflowid.txt            
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  
      - revert-migrations: 
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          current_value: $(cat backend/migration_status.txt)          


  cleanup:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update  tar gzip 
            apk add --update nodejs npm     
            pip3 install awscli
      - get-backend-url   
      - attach_workspace:
          at: ~/               
      - run:
          name: Get old stack workflow id
          command: |
            source $BASH_ENV
            # export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            # echo 'STACKS: "${STACKS[@]}"' >> BASH_ENV
            export OldWorkflowID="${OldWorkflowID}"
            echo ${OldWorkflowID}
            cat .circleci/ansible/workflowid.txt
            # export STACKS=[${STACKS[@]}] #put the list of stacks here
            
      - run:
          name: Remove old stacks and files
          command: |
            source $BASH_ENV
            export OldWorkflowID=$(cat .circleci/ansible/workflowid.txt)
            echo ${CIRCLE_WORKFLOW_ID:0:7}
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  
      # - revert-migrations: 
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  , 123              
    
                  
workflows:
  default:
    jobs:
      # - build-frontend:
      #     filters:
      #       branches:
      #         only: [dev-branch, master]
      # - build-backend:
      #     filters:
      #       branches:
      #         only: [dev-branch, master]      
      # - test-frontend:
      #     requires: [build-frontend]
      #     filters:
      #       branches:
      #         only: [dev-branch, master]          
      # - test-backend:
      #     requires: [build-backend]
      #     filters:
      #       branches:
      #         only: [dev-branch, master]          
      # - scan-frontend:
      #     requires: [build-frontend]
      #     filters:
      #       branches:
      #         only: [dev-branch, master]          
      # - scan-backend:
      #     requires: [build-backend]
      #     filters:
      #       branches:
      #         only: [dev-branch, master]          
      # - deploy-infrastructure:
          # requires:
          #   - test-frontend
          #   - test-backend
          #   - scan-frontend
          #   - scan-backend
          # filters:
          #   branches:
          #     only: [master]            
      - configure-infrastructure:
          # requires: [deploy-infrastructure]
          filters:
            branches:
              only: [master]           
#       - configure-node-and-npm:
#           requires: [configure-infrastructure]
#           filters:
#             branches:
#               only: [master]           
#       - run-migrations:
#           requires: [configure-node-and-npm]
#           filters:
#             branches:
#               only: [master]             
#       - deploy-frontend:
#           requires: [run-migrations]    
#           filters:
#             branches:
#               only: [master]           
#       - deploy-backend:
#           requires: [run-migrations]    
#           filters:
#             branches:
#               only: [master]           
#       - smoke-test:
#           requires: [deploy-backend, deploy-frontend]
#           filters:
#             branches:
#               only: [master]           
#       - cloudfront-update:
#           requires: [smoke-test]
#           filters:
#             branches:
#               only: [master]           
#       - cleanup:
#           requires: [cloudfront-update]          
#           filters:
#             branches:
#               only: [master]           