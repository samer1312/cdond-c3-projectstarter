version: 2.1
orbs:
  # Choose either one of the orbs below
  # Declare a dependency on the welcome-orb
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3
commands:
      destroy-environment:
        description: Destroy backend and frontend cloudformation stacks given a workflow ID.
        parameters:
          workflow_id:
            type: string      
        steps:
          - run:
              name: Destroy environments
              when: on_fail
              command: |
                echo "Destroying environment: ${CIRCLE_WORKFLOW_ID:0:7}"
                # Your code goes here   
                aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} 
                aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
                aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive       

      revert-migrations:
        description: Revert the last migration
        parameters:
            workflow_id:
                type: string      
        steps:
            - run:
                name: Revert migrations
                when: on_fail
                command: |
                    # Your Memstash or kvdb.io GET URL code goes here
                    # Example: Memstash.io
                    # SUCCESS=$(curl -H "token: e52b52de-ee26-41a5-86e8-e8dcc3d995a5" --request GET https://api.memstash.io/values/migration_<< parameters.workflow_id >>)
                    # Example: kvdb.io
                    SUCCESS=$(curl --insecure  https://kvdb.io/Sg5a76d6W124SYxaE5H6v/migration_${CIRCLE_WORKFLOW_ID:0:7})
                    # Logic for reverting the database state
                    if (( $SUCCESS == 1 ));
                    then
                        cd ~/project/backend
                        npm install
                        npm run migration:revert
                    fi  
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
            keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
            keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
            keys: [frontend-build]
      - run:
          name: analyze frontend
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            # npm audit --audit-level=critical
            # npm audit fix --force
  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
            keys: [backend-build]
      - run:
          name: analyze backend 
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            # npm audit --audit-level=critical
            # npm audit fix --force

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI heelo
      - image: amazon/aws-cli
    steps:
      # Checkout code from gitaa
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              # exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              # exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            echo [web] > ~/inventory.txt
            BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:project,Values=udapeople" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            # exit 1
            echo $BACKEND_IP >> ~/inventory.txt
            echo http://$BACKEND_IP:3030 > ~/backend_url.txt
            cat ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
            - backend_url.txt
      # Here's where you will add some code to rollback on failure     mm 
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
     
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.9-alpine3.16
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: ["bf:b1:29:b6:e8:c7:4c:97:f7:b6:7f:d9:1e:92:65:98"]
      
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
            apk add --no-cache aws-cli
            apk add --update tar gzip
      - attach_workspace:
            at: ~/
      - run:
          name: Configure server
          command: |
            # Your code here
            cat ~/inventory.txt
            cd .circleci/ansible
            ansible-playbook -i ~/inventory.txt configure-server.yml
            # exit 1
      # Here's where you will add some code to rollback on failure      
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - inventory.txt
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
   
  run-migrations:
    docker:
      # Docker image here that supports NodeJS JSww
      - image: circleci/node:13.8.0

    steps:
      # Checkout code from git
      - checkout
      # - attach_workspace:
      #    at: ~/
      - restore_cache:
          keys: [backend-build]
      # - run:
      #     name: Install dependencies
      #     command: |
      #      sudo apt-get update
      #      sudo apt-get install -y awscli curl
      - run:
          name: Run migrations
          command: |
            # # Your code here
              cd backend
              # npm install
              # npm audit fix
            #   npm cache clean --force
              # npm audit fix --force
              # npm audit fix --force
              # cat /root/.npm/eresolve-report.txt
              # Run and save the migration output
              npm run migrations > migrations_dump.txt
              cat migrations_dump.txt
              grep -q "has been executed successfully." migrations_dump.txt
            # exit 1s
      - run:
          name: Send migration results to kvdb
          command: |
            # Your code here 
                if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                then
                    # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                    # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                    # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                    curl --insecure https://kvdb.io/DnvQZ5njzEz9kcs8AU4tvi/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                    # curl https://kvdb.io/Sg5a76d6W124SYxaE5H6v/migration_${CIRCLE_WORKFLOW_ID:0:7}
                fi
            # exit 1
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - inventory.txt
     # Here's where you will add some code to rollback on failure     fe 
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # - revert-migrations:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
         
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.9-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["bf:b1:29:b6:e8:c7:4c:97:f7:b6:7f:d9:1e:92:65:98"]
      # attach workspace
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
            at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible 
            # apk add --no-cache aws-cli
            pip3 install awscli 
            apk add --update tar gzip
            apk add --update nodejs npm curl
      - run:
          name: Deploy
          command:  |
            # echo ENVIRONMENT=production >> "backend/.env"
            # echo NODE_ENV=production >> "backend/.env"
            # printenv >> ./backend/.env
            # echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            # echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            # echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            # echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            # echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            # echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            # echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            # echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            # echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            # tar -tvf artifact.tar.gz
            # printenv >> ./backend/.env
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i ~/inventory.txt deploy-backend.yml
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - backend/.env


  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.7-alpine3.16
  
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
            at: ~/
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible 
            # apk add --no-cache aws-cli
            pip3 install awscli 
            apk add --update tar gzip
            apk add --update nodejs npm curl
      - run:
          name: Get backend url
          command: |
            # your code here
            # export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            # export API_URL="http://${BACKEND_IP}:3030"
            # export API_URL="http://${BACKEND_IP}:3030"
            export API_URL=`cat ~/backend_url.txt`
            echo API_URL=${API_URL} >> frontend/.env
            echo "${API_URL}"
            cat frontend/.env
            # cd frontend
            # npm install
            # npm run build
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            # npm audit fix
            # npm audit fix --force
            npm run build
            # ls dist
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure de     
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # - revert-migrations:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"            
 
      # - run:
      #     name: Deploy backend
      #     command: |
      #       # your code here
      #       # cd backend
      #       # npm i
      #       # npm run build
      #       # cd ..
      #       # tar -C backend -czvf artifact.tar.gz .
      #       cd .circleci/ansible
      #       echo "Contents  of the inventory.txt file is -------"
      #       cat inventory.txt
      #       ansible-playbook -i ~/inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # - revert-migrations:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.9-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
            at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible 
            # apk add --no-cache aws-cli
            pip3 install awscli 
            apk add --update tar gzip
            apk add --update nodejs npm curl 
      # - run:
      #     name: Get backend url
      #     command: |
      #       # your code here
           
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            # export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            # export API_URL="http://${BACKEND_IP}:3030"
            export API_URL=`cat ~/backend_url.txt`
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                  # Change this to 0 after the job fails
                return 0
              else
                return 1
              fi
      # Here's where you will add some code to rollback on failure  
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # - revert-migrations:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.9-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --no-cache aws-cli
            apk add --update ansible 
            # apk add --no-cache aws-cli
            # pip3 install awscli 
            apk add --update tar gzip
            apk add --update nodejs npm curl 
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      # Here's where you will add some code to rollback on failure  or
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # - revert-migrations:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  cleanup:
    docker:
      # Docker image here
      - image: python:3.9-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --no-cache aws-cli
            apk add --update ansible 
            apk add --update tar gzip
            apk add --update nodejs npm curl 
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo "OldWorkflowID: ${OldWorkflowID}"
            export CIRCLE_WORKFLOW_ID="${CIRCLE_WORKFLOW_ID:0:7}"
            echo "CIRCLE_WORKFLOW_ID : ${CIRCLE_WORKFLOW_ID}"
            # export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            # echo Stack names: "${STACKS[@]}"  
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo s3://udapeople-${OldWorkflowID}
            if [[ "${CIRCLE_WORKFLOW_ID}" != "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # - revert-migrations:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"      

workflows:
  default:
    jobs:
      - build-frontend:
          filters:
            branches:
              only: [dev-branch, master]
      - build-backend:
          filters:
            branches:
              only: [dev-branch, master]      
      - test-frontend:
          requires: [build-frontend]
          filters:
            branches:
              only: [dev-branch, master]          
      - test-backend:
          requires: [build-backend]
          filters:
            branches:
              only: [dev-branch, master]          
      - scan-frontend:
          requires: [build-frontend]
          filters:
            branches:
              only: [dev-branch, master]          
      - scan-backend:
          requires: [build-backend]
          filters:
            branches:
              only: [dev-branch, master]          
      - deploy-infrastructure:
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
          filters:
            branches:
              only: [master]            
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: [master]           
          
      - run-migrations:
          requires: [configure-infrastructure]
          filters:
            branches:
              only: [master]             
      - deploy-frontend:
          requires: [run-migrations]    
          filters:
            branches:
              only: [master]           
      - deploy-backend:
          requires: [run-migrations]    
          filters:
            branches:
              only: [master]           
#       - smoke-test:
#           requires: [deploy-backend, deploy-frontend]
#           filters:jmnj
#             branches:
#               only: [master]           
#       - cloudfront-update:
#           requires: [smoke-test]
#           filters:
#             branches:
#               only: [master]           
#       - cleanup:
#           requires: [cloudfront-update]          
#           filters:
#             branches:
#               only: [master] 